// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Usuarios {
  idUsuario           Int                         @id @default(autoincrement())
  nombre              String
  telefono            Int                         @unique
  correo              String                      @unique
  password            String    
  
  roles               Rol[]
  pagos               Pagos[]
  direccion           Direccion[]
  productos           Productos[]
  pedidos             Pedidos[]
  evaluacion          Evaluacion[]
  preguntas           Preguntas[]
}

model Rol {
    idRol               Int                         @id @default(autoincrement())
    descripcion         String
    usuarios            Usuarios[]
}

model Pagos {
  idPago              Int                         @id @default(autoincrement())
  numTarjeta          Int?                        @unique
  proveedor           String?
  numCuenta           Int?                        @unique
  fechaExpiracion     DateTime?                   @default(now())
  nombre              String
  
  usuarioId              Int
  tipoPagoId          Int
  
  usuarios            Usuarios                    @relation(fields: [usuarioId],references: [idUsuario])
  tipoPago            TipoPago                    @relation(fields: [tipoPagoId],references: [idTipoPago])

  pedidos             Pedidos[]
}

model TipoPago {
  idTipoPago          Int                         @id @default(autoincrement())
  TipoPago            String
  
  pagos               Pagos[]
}

model Direccion {
  idDireccion         Int                         @id @default(autoincrement())
  provincia           String
  canton              String
  distrito            String
  direccionExacta     String
  codigoPostal        Int
  telefono            Int

  usuarioId           Int

  usuarios            Usuarios                    @relation(fields: [usuarioId],references: [idUsuario])

  pedidos             Pedidos[]
}

model Productos {
  idProducto          Int                         @id @default(autoincrement())
  nombre              String
  descripcion         String
  precio              Decimal
  cantidad            Int
  
  categoriaId         Int
  estadoProductoId    Int
  usuarioId           Int

  categoria           CategoriaProducto           @relation(fields: [categoriaId],references: [idCategoria])
  estadoProducto      EstadoProducto              @relation(fields: [estadoProductoId],references: [idEstado])
  usuarios            Usuarios                    @relation(fields: [usuarioId],references: [idUsuario])
 
  fotosProductos      Fotos_Productos[]
  preguntas           Preguntas[]
  pedidos             Pedidos_Productos[]
}

model Fotos_Productos { 
  idFoto              Int                         @id @default(autoincrement())
  Foto                Bytes?
  idProducto          Int  

  productos               Productos           @relation(fields: [idProducto],references: [idProducto])

}

model CategoriaProducto {
  idCategoria         Int                        @id @default(autoincrement())
  categoria           String

  productos           Productos[]
}

 model EstadoProducto {
   idEstado            Int                        @id @default(autoincrement())
   estado              String

   productos           Productos[]
 }

model Preguntas {
  idPregunta          Int                         @id @default(autoincrement())
  pregunta            String

  productoId          Int
  usuarioId           Int

  productos           Productos                   @relation(fields: [productoId],references: [idProducto])
  usuarios            Usuarios                    @relation(fields: [usuarioId], references: [idUsuario])

  respuestas          Respuestas[]
}

model Respuestas  {
  idRespuesta         Int                         @id @default(autoincrement())
  respuesta           String
  
  preguntaId          Int

  preguntas           Preguntas                   @relation(fields: [preguntaId], references: [idPregunta])
}

model Pedidos {
  idPedido            Int                         @id @default(autoincrement())
  //idProveedor         Int?

  direccionId         Int
  usuarioId           Int
  estadoPedidoId      Int
  pagoId              Int
  total               Decimal
  fechaCompra         DateTime @default(now()) @updatedAt

  direcciones         Direccion                   @relation(fields: [direccionId],references: [idDireccion])
  usuarios            Usuarios                    @relation(fields: [usuarioId],references: [idUsuario])
  estadoPedido        Estado_Pedido               @relation(fields: [estadoPedidoId],references: [idEstadoPedido])
  pagos               Pagos                       @relation(fields: [pagoId],references: [idPago])
  
  evaluacion          Evaluacion[]
  productos           Pedidos_Productos[]
}

model Estado_Pedido {
  idEstadoPedido            Int                   @id @default(autoincrement())
  estado                    String

  pedidos                   Pedidos[]
}

model Pedidos_Productos {
  pedidoId            Int
  pedidos             Pedidos                     @relation(fields: [pedidoId],references: [idPedido])

  productoId          Int
  productos           Productos                   @relation(fields: [productoId],references: [idProducto])
  @@id([pedidoId,productoId])
  cantidad            Int
}

model Evaluacion  {
  idEvaluacion        Int                         @id @default(autoincrement())
  calificacion        Decimal?
  comentario          String?
  
  usuarioId           Int
  pedidoId            Int

  usuarios            Usuarios                    @relation(fields: [usuarioId],references: [idUsuario])
  pedidos             Pedidos                     @relation(fields: [pedidoId],references: [idPedido])
}

// enum Rol {
//   ADMIN
//   Vendedor
//   Cliente
// }

// enum  EstadoPedido  {
//   Recibido
//   Enviado
//   Entregado
// }

// enum EstadoProducto {
//   Disponible
//   Agotado
// }